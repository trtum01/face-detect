module ApplicationHelper
  include FaceHelper
  include ApiFaceHelper

  def slope_calculate(x1,x2,y1,y2)
    slope = (y1 - y2)/(x1 - x2)
    Math.atan(slope)*(180/Math::PI)
  end

  def information_shape(format_shape)
    case format_shape
    when "circle"
      info = "คนธาตุน้ำ คือบุคคลที่มีลักษณะรูปหน้าทรงกลม อุปนิสัยโดยทั่วไปจะเป็นคนที่มีอารมณ์อ่อนไหว ฉลาดทันคน รักความสบาย ชอบเข้าสังคม มีเพื่อนฝูงมากมาย เป็นคนประนีประนอม อะลุ่มอล่วย ขาดความเด็ดขาด ปรับตัวเข้าหาผู้อื่นได้ดี รักงานด้านบริการหรือติดต่อประสานงาน เหมาะเป็นนักประสานประโยชน์ หรือผู้ช่วยระดับบริหาร"
    when "oval"
      info = "คนธาตุดิน คือบุคคลที่มีรูปหน้าทรงรีหรือรูปไข่ อุปนิสัยโดยทั่วไปจะเป็นคนพูดจาตรงไปตรงมา มั่นคงหนักแน่น ชอบทำมากกว่าพูด ขยัน ซื่อสัตย์ รักษาระเบียบ ไม่ชอบเสี่ยงทำธุรกิจหรืองานใหญ่ที่ ไม่มีความแน่นอน เหมาะที่จะเป็นพนักงานฝ่ายปฏิบัติการ"
    when "square"
      info = "คนธาตุทอง คือบุคคลที่มีลักษณะรูปหน้าเหลี่ยมจัตุรัสอุปนิสัยโดยทั่วไปจะเป็นคนที่มีความเป็นผู้นำ มีวิสัยทัศน์มองการณ์ไกล ฉลาด สุขุม มีเหตุผล กล้าคิดกล้าทำ กล้าตัดสินใจ และกล้ารับผิดชอบ เหมาะที่จะเป็นนักบริหาร วางนโยบาย วางแผน"
    when "rectangle"
      info = "คนธาตุไม้ คือบุคคลที่มีรูปหน้าสี่เหลี่ยมผืนผ้า อุปนิสัยโดยทั่วไปจะเป็นคนที่โกรธง่ายหายเร็ว ใจดีมีเมตตา มีวิสัยทัศน์กว้างไกล มีวาทศิลป์ในการพูด รอบรู้หลายเรื่อง ฉลาดทันคน ถนัดด้านการเรียนการสอน หรือเป็นที่ปรึกษาวางแผน บุคคลแบบนี้เหมาะที่จะเป็นนักคิด นักวิชาการ นักวิเคราะห์"
    when "triangle"
      info = "คนธาตุไฟ คือบุคคลที่มีรูปหน้าแบบสามเหลี่ยมหรือคางเรียวแหลม อุปนิสัยโดยทั่วไปจะมีความคล่องแคล่วว่องไว ทะเยอทะยาน ชอบผจญภัย มุทะลุวู่วาม มีจินตนาการและมีอุดมคติสูง ชอบค้นคว้าหาเหตุผล เรียนเก่งเรียนรู้ไว บุคคล แบบนี้เหมาะที่จะเป็นนักตรวจสอบ หรือหัวหน้างานระดับกลางๆ"
    else
      info = "ไม่ทราบใบหน้า อาจเกิดจากปัจจัยหลายอย่างหลาย ทำให้วิเคราะห์ไม่ได้"
    end
    info
  end

  def wide_face_calculate(wide, face_size_object)
    Math.sqrt(((wide[0]['x'].to_i*face_size_object['width']/100 - wide[1]['x'].to_i*face_size_object['width']/100)**2) + ((wide[0]['y'].to_i*face_size_object['height']/100 - wide[1]['y'].to_i*face_size_object['height']/100)**2))
  end

  def long_face_calculate(long, face_size_object)
    Math.sqrt(((long[0]['x'].to_i*@face_size['width']/100 - long[1]['x'].to_i*face_size_object['width']/100)**2) + ((long[0]['y'].to_i*face_size_object['height']/100 - long[1]['y'].to_i*face_size_object['height']/100)**2))
  end
end
